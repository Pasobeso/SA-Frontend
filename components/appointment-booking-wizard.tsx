"use client"

import { useState } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { PatientInfoStep } from "./booking-steps/patient-info-step"
import { DateSelectionStep } from "./booking-steps/date-selection-step"
import { TimeSelectionStep } from "./booking-steps/time-selection-step"
import { ConfirmationStep } from "./booking-steps/confirmation-step"
import { Booking } from "@/lib/api/booking"
import { toast } from "react-toastify"
import "react-toastify/dist/ReactToastify.css"

interface AppointmentBookingWizardProps {
  isOpen: boolean
  onClose: () => void
  onComplete: (data: any) => void
}

// ‚úÖ Backend-aligned structure for booking data
export interface BookingData {
  slot_id: string
  selectedSlot?: {
    start_time: string
    end_time: string
    doctor_id: number
  }
  selectedDate?: string
  selectedTime?: string
  appointment_date?: string     // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
  appointment_time?: string     // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
  patient_abnormal_symptom: string
  patient_is_missed_medication: string
  patient_blood_test_status: string
  patient_is_overdue_medication: string
  patient_is_partner_hiv_positive: string
}


export function AppointmentBookingWizard({
  isOpen,
  onClose,
  onComplete,
}: AppointmentBookingWizardProps) {
  const [currentStep, setCurrentStep] = useState(1)
  const totalSteps = 4

  // ‚úÖ initialize with backend fields
  const [bookingData, setBookingData] = useState<BookingData>({
    slot_id: "",
    patient_abnormal_symptom: "",
    patient_is_missed_medication: "",
    patient_blood_test_status: "",
    patient_is_overdue_medication: "",
    patient_is_partner_hiv_positive: "",
  })

  const handleNext = () => {
    if (currentStep < totalSteps) setCurrentStep((s) => s + 1)
  }

  const handleBack = () => {
    if (currentStep > 1) setCurrentStep((s) => s - 1)
  }

  // ‚úÖ Working handleComplete for react-toastify
const handleComplete = async () => {
  try {
    const yesNoToText = (val: string | boolean) =>
      val === true || val === "‡πÄ‡∏Ñ‡∏¢" || val === "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß" || val === "‡πÉ‡∏ä‡πà"
        ? "‡πÄ‡∏Ñ‡∏¢"
        : "‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢"

    const localData = { ...bookingData }

    // üïí ‡∏™‡∏£‡πâ‡∏≤‡∏á start / end ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á
    const start = new Date(localData.appointment_time || localData.selectedSlot?.start_time || new Date())
    const end = new Date(start.getTime() + 60 * 60 * 1000) // +1 ‡∏ä‡∏°.

    const payload = {
      slot_id: localData.slot_id,
      doctor_id: localData.selectedSlot?.doctor_id,      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°
      start_time: start.toISOString(),                   // ‚úÖ ‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ï‡πá‡∏°
      end_time: end.toISOString(),
      patient_abnormal_symptom: localData.patient_abnormal_symptom || "-",
      patient_is_missed_medication: yesNoToText(localData.patient_is_missed_medication),
      patient_blood_test_status: yesNoToText(localData.patient_blood_test_status),
      patient_is_overdue_medication: yesNoToText(localData.patient_is_overdue_medication),
      patient_is_partner_hiv_positive: yesNoToText(localData.patient_is_partner_hiv_positive),
    }

    console.log("‚úÖ Final payload:", payload)
    const res = await Booking.addAppointment(payload)

    toast.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ", { position: "top-right" })
    setTimeout(() => onClose(), 200)
    if (typeof onComplete === "function") onComplete(res)
  } catch (err) {
    console.error(err)
    toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‚ùå", { position: "top-right" })
  }
}



  const updateBookingData = (updates: Partial<BookingData>) => {
    setBookingData((prev) => ({ ...prev, ...updates }))
  }

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <PatientInfoStep
            data={bookingData}
            onUpdate={updateBookingData}
            onNext={handleNext}
          />
        )
      case 2:
        return (
          <DateSelectionStep
            data={bookingData}
            onUpdate={updateBookingData}
            onNext={handleNext}
            onBack={handleBack}
          />
        )
      case 3:
        return (
          <TimeSelectionStep
            data={bookingData}
            onUpdate={updateBookingData}
            onNext={handleNext}
            onBack={handleBack}
          />
        )
      case 4:
        return (
          <ConfirmationStep
            data={bookingData}
            onConfirm={handleComplete}
            onBack={handleBack}
          />
        )
      default:
        return null
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-lg font-semibold">
            {currentStep === 1 && "1. ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"}
            {currentStep === 2 && "2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"}
            {currentStep === 3 && "3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ / ‡∏´‡∏°‡∏≠"}
            {currentStep === 4 && "4. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢"}
          </DialogTitle>
        </DialogHeader>

        <div className="mt-6">{renderStep()}</div>
      </DialogContent>
    </Dialog>
  )
}
